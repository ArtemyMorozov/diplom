<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>